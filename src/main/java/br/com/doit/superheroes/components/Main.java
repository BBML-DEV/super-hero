// Generated by the Maven Archetype Plug-in
package br.com.doit.superheroes.components;

import java.util.Arrays;
import java.util.List;

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;

import br.com.doit.superheroes.model.Ability;
import br.com.doit.superheroes.model.Strength;
import br.com.doit.superheroes.model.SuperHero;
import er.extensions.eof.ERXEC;

public class Main extends AbstractComponent {
	
	public String description;
	public Strength strength;
	private NSArray<Ability> abilities;
	private Ability ability;
	public Ability abilityItem;
	private String errorAbilityMessage;
	private boolean isErrorAbilityMessage;
	private boolean thisAbilityIsBeingUsedByAHero;
	private String thisAbilityDeleteMessage;
	private String filterAbilityDescription;
	private Strength filterAbilityStrength;
	private NSArray<Ability> abilitiesFilteredList;
	

	public Main(WOContext context) {
		super(context);
	}
	
    public WOActionResults goToHeroPage() {
    	Hero goToHero = pageWithName(Hero.class);
        return goToHero; 
    }
	
	
	public NSArray<Ability> getAbilitiesFilteredList(){
		return abilitiesFilteredList != null ? abilitiesFilteredList : abilities();
	}
	
	public boolean hasFilteredAbilities() {
		return !getAbilitiesFilteredList().isEmpty();
	}
	
	 public void updateAbilitiesFilteredList() {
		thisAbilityIsBeingUsedByAHero = false;
		thisAbilityDeleteMessage = null;
		 
		 EOQualifier qualifier = Ability.DESCRIPTION.contains(filterAbilityDescription).or(Ability.STRENGTH.is(filterAbilityStrength));
		 abilitiesFilteredList = Ability.fetchAbilities(editingContext, qualifier, Ability.DESCRIPTION.ascs());
	}
	
	
	public Ability ability() {
		return ability;
	}
	
	public void setAbility(Ability ability) {
		this.ability = ability;
		
		description = ability.description();
		strength = ability.strength();
	}
	
	
	public NSArray<Ability> abilities(){
		if(abilities == null) {
			abilities = Ability.fetchAllAbilities(editingContext());
		}
		
		
		return abilities;
	}
	
	
	public WOActionResults editPower() {
		Main abilityEditComponent = pageWithName(Main.class);
		abilityEditComponent.setAbility(abilityItem.localInstanceIn(editingContext()));
		return abilityEditComponent;
	}
	
	
	public WOActionResults deletePower() {

	    NSArray<SuperHero> heroesWithAbility = SuperHero.fetchSuperHeros(editingContext(), 
	    		EOQualifier.qualifierWithQualifierFormat("ability = %@", new NSArray<Ability>(abilityItem)), null);

	    if (!heroesWithAbility.isEmpty()) {
	        thisAbilityIsBeingUsedByAHero = true;
	        thisAbilityDeleteMessage = "This skill is being used by a hero and cannot be deleted.";
	        return null;
	    }
	    

	    abilityItem.editingContext().deleteObject(abilityItem);
	    abilityItem.editingContext().saveChanges();
	    
	    
	    thisAbilityIsBeingUsedByAHero = false;
	    thisAbilityDeleteMessage = null;


	    return pageWithName(Main.class);
	}

	
	
	public boolean hasAbility() {
		 return !abilities().isEmpty();
	}
	
	
	public WOActionResults savePower() {
		
		
		if(description == null || description.trim().isEmpty()) {
			errorAbilityMessage = "Description power cannot be empty";
			isErrorAbilityMessage = true;
			return null;
		}
		
		if(strength == null) {
			errorAbilityMessage = "Strength power must be selected";
			isErrorAbilityMessage = true;
			return null;			
		}
		
		if(ability == null) {
			ability = Ability.createAbility(editingContext(), description, strength);
		} else {
			ability = ability.localInstanceIn(editingContext());
		}
				
		ability.setDescription(description);
		ability.setStrength(strength);

		
		ability.editingContext().saveChanges();
		errorAbilityMessage = null;
		isErrorAbilityMessage = false;
		
		ability = null;
		
		
		return pageWithName(Main.class);
	}

	
	public NSMutableArray<Strength> abilityStrengths() {
		NSMutableArray<Strength> strengths =  new NSMutableArray<Strength>();
		
		for (Strength strength : Strength.values()) {
			strengths.add(strength);
		}
		return strengths;
	}
	
	
	public String getErrorAbilityMessage() {
		return errorAbilityMessage;
	}
	
	
	
	public String getThisAbilityDeleteMessage() {
		return thisAbilityDeleteMessage;
	}
	
	
	public boolean getThisAbilityIsBeingUsedByAHero() {
		return thisAbilityIsBeingUsedByAHero;
	}
	
	
	public boolean getIsErrorAbilityMessage() {
		return isErrorAbilityMessage;
	}
	
	
	public String getFilterAbilityDescription() {
		return filterAbilityDescription;
	}
	
	public void setFilterAbilityDescription(String filterAbilityDescription) {
		this.filterAbilityDescription = filterAbilityDescription;
		
	}
	
	public Strength getFilterAbilityStrength() {
		return filterAbilityStrength;
	}
	
	public void setFilterAbilityStrength(Strength filterAbilityStrength) {
		this.filterAbilityStrength = filterAbilityStrength;
	}

	
}
